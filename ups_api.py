import requests


# This is the class for testing your UPS App and api calls
class UpsApiClientTesting:

    # Define some variables we will be using for every API call
    def __init__(self, client_id, client_secret, redirect_uri):
        self.client_id = client_id
        self.client_secret = client_secret
        self.redirect_uri = redirect_uri
        self.access_t = 'Not Generated'  # Token. I need to add access ttl.
        self.refresh_t = 'Not Generated'  # Once more T stands for Token
        self.refresh_ttl = 0  # Time to Live

    # Debugging tools and information
    def self_info(self):
        print('Client ID: ' + self.client_id)
        print('Client Secret: ' + self.client_secret)
        print('Redirect URI: ' + self.redirect_uri)
        print('Access Token: ' + self.access_t)
        print('Refresh Token: ' + self.refresh_t)

        if self.refresh_ttl == 0:
            print('Refresh Token expired or Not Generated.')
        else:
            print('Refresh Token Expires in: ', self.refresh_ttl)

    # O-Auth Methods
    # This will validate your client and give you your initial token.
    def validate_client(self, debugging=False):
        # Testing URL
        url = "https://wwwcie.ups.com/security/v1/oauth/validate-client"

        # Proper Credentials
        query = {
            "client_id": self.client_id,
            "redirect_uri": self.redirect_uri
        }

        # The request, should return 200 with information which will be printed.
        response = requests.get(url, params=query)
        redirect_r = response.json().get('LassoRedirectURL')

        # 200 is the code for a successful api call.
        if response.status_code == 200:
            print("Copy and paste the following into your browser:")
            print(
                redirect_r + 'client_id=' + self.client_id + '&redirect_uri' +
                self.redirect_uri + '&response_type=code&scope=read&type=ups_com_api'
            )
        else:
            print(response.status_code)

        # Debugging
        if debugging:
            print('Response: ' + response.json())
            print('Status Code: ' + str(response.status_code))
            print('Query: ', query)

    # This will generate your O-Auth token from the access token generated by validate client
    def generate_token(self, access_token, debugging=False):
        url = "https://wwwcie.ups.com/security/v1/oauth/token"

        # This is a POST request, and we need a payload to post to UPS.
        payload = {
            'grant_type': "authorization_code",
            'code': access_token,
            'redirect_uri': self.redirect_uri
        }

        headers = {
            'Content-Type': "application/x-www-form-urlencoded",
            'x-merchant-id': self.client_id
        }

        # The request
        response = requests.post(url, data=payload, headers=headers, auth=(self.client_id, self.client_secret))

        # If the call was a success then store O-Auth tokens.
        if response.status_code == 200:
            # Set Tokens
            self.access_t = response.json().get('access_token')
            self.refresh_t = response.json().get('refresh_token')
            self.refresh_ttl = response.json().get('refresh_token_expires_in')
            # And then print the tokens.
            print('Access Token: ' + response.json().get('access_token'))
            print('Refresh Token: ' + response.json().get('refresh_token'))
        else:
            print(response.status_code)

        if debugging:
            print("Payload: ", payload)
            print("Headers: ", headers)
            print("Response: ", response.json())
            print("Status Code: ", response.status_code)

    # This will generate a new refresh token from an O-Auth token
    def refresh_token(self, debugging=False):
        url = "https://wwwcie.ups.com/security/v1/oauth/refresh"

        payload = {
            "grant_type": "refresh_token",
            "refresh_token": self.refresh_t
        }

        headers = {"Content-Type": "application/x-www-form-urlencoded"}

        # The request to get the token
        response = requests.post(url, data=payload, headers=headers, auth=(self.client_id, self.client_secret))

        if response.status_code == 200:
            self.access_t = response.json().get('access_token')
            self.refresh_t = response.json().get('refresh_token')
            self.refresh_ttl = response.json().get('refresh_token_expires_in')
            # And then print the tokens.
            print('Access Token: ' + response.json().get('access_token'))
            print('Refresh Token: ' + response.json().get('refresh_token'))
            print('Refresh Token TTL: ' + self.refresh_ttl)
        else:
            print(response.status_code)

        if debugging:
            print("Payload: ", payload)
            print("Headers: ", headers)
            print("Response: ", response.json())
            print("Status Code: ", response.status_code)

    # Client Credentials
    def client_credentials(self):
        url = "https://wwwcie.ups.com/security/v1/oauth/token"

        # Super simple payload
        payload = {
            "grant_type": "client_credentials"
        }

        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
            "x-merchant-id": self.client_secret
        }

        response = requests.post(url, data=payload, headers=headers, auth=(self.client_id, self.client_secret))

        print(response.json().get('access_token'))
        self.access_t = response.json().get('access_token')
