import requests
import random
import string


# A custom function to generate the IDs we will be using for transID
def _id_generator():
    id_32 = ''.join(random.choices(string.ascii_uppercase + string.digits, k=32))
    return str(id_32)


# This is the class for testing your UPS App and api calls
class UpsApiClientTesting:

    # Define some variables we will be using for every API call
    def __init__(self, client_id, client_secret, redirect_uri):
        self.client_id = client_id
        self.client_secret = client_secret
        self.redirect_uri = redirect_uri
        self.access_t = 'Not Generated'  # Token. I need to add access ttl.
        self.refresh_t = 'Not Generated'  # Once more T stands for Token
        self.refresh_ttl = 0  # Time to Live

    # Debugging tools and information
    def self_info(self):
        print('Client ID: ' + self.client_id)
        print('Client Secret: ' + self.client_secret)
        print('Redirect URI: ' + self.redirect_uri)
        print('Access Token: ' + self.access_t)
        print('Refresh Token: ' + self.refresh_t)

        if self.refresh_ttl == 0:
            print('Refresh Token expired or Not Generated.')
        else:
            print('Refresh Token Expires in: ', self.refresh_ttl)

    def set_access_token(self, token):
        self.access_t = token

    # O-Auth Methods
    # This will validate your client and give you your initial token.
    def validate_client(self, debugging=False):
        # Testing URL
        url = "https://wwwcie.ups.com/security/v1/oauth/validate-client"

        # Proper Credentials
        query = {
            "client_id": self.client_id,
            "redirect_uri": self.redirect_uri
        }

        # The request, should return 200 with information which will be printed.
        response = requests.get(url, params=query)
        redirect_r = response.json().get('LassoRedirectURL')

        # 200 is the code for a successful api call.
        if response.status_code == 200:
            print("Copy and paste the following into your browser:")
            print(
                redirect_r + 'client_id=' + self.client_id + '&redirect_uri' +
                self.redirect_uri + '&response_type=code&scope=read&type=ups_com_api'
            )
        # Print Error Information
        else:
            print(response.status_code)
            print(response.json()['response']['errors'][0]['code'])
            print(response.json()['response']['errors'][0]['message'])

        # Debugging
        if debugging:
            print('Response: ' + response.json())
            print('Status Code: ' + str(response.status_code))
            print('Query: ', query)

    # This will generate your O-Auth token from the access token generated by validate client
    def generate_token(self, access_token, debugging=False):
        url = "https://wwwcie.ups.com/security/v1/oauth/token"

        # This is a POST request, and we need a payload to post to UPS.
        payload = {
            'grant_type': "authorization_code",
            'code': access_token,
            'redirect_uri': self.redirect_uri
        }

        headers = {
            'Content-Type': "application/x-www-form-urlencoded",
            'x-merchant-id': self.client_id
        }

        # The request
        response = requests.post(url, data=payload, headers=headers, auth=(self.client_id, self.client_secret))

        # If the call was a success then store O-Auth tokens.
        if response.status_code == 200:
            # Set Tokens
            self.access_t = response.json().get('access_token')
            self.refresh_t = response.json().get('refresh_token')
            self.refresh_ttl = response.json().get('refresh_token_expires_in')
            # And then print the tokens.
            print('Access Token: ' + response.json().get('access_token'))
            print('Refresh Token: ' + response.json().get('refresh_token'))
        # Print Error Information
        else:
            print(response.status_code)
            print(response.json()['response']['errors'][0]['code'])
            print(response.json()['response']['errors'][0]['message'])

        if debugging:
            print("Payload: ", payload)
            print("Headers: ", headers)
            print("Response: ", response.json())
            print("Status Code: ", response.status_code)

    # This will generate a new refresh token from an O-Auth token
    def refresh_token(self, debugging=False):
        url = "https://wwwcie.ups.com/security/v1/oauth/refresh"

        payload = {
            "grant_type": "refresh_token",
            "refresh_token": self.refresh_t
        }

        headers = {"Content-Type": "application/x-www-form-urlencoded"}

        # The request to get the token
        response = requests.post(url, data=payload, headers=headers, auth=(self.client_id, self.client_secret))

        if response.status_code == 200:
            self.access_t = response.json().get('access_token')
            self.refresh_t = response.json().get('refresh_token')
            self.refresh_ttl = response.json().get('refresh_token_expires_in')
            # And then print the tokens.
            print('Access Token: ' + response.json().get('access_token'))
            print('Refresh Token: ' + response.json().get('refresh_token'))
            print('Refresh Token TTL: ' + self.refresh_ttl)
        # Print Error Information
        else:
            print(response.status_code)
            print(response.json()['response']['errors'][0]['code'])
            print(response.json()['response']['errors'][0]['message'])

        if debugging:
            print("Payload: ", payload)
            print("Headers: ", headers)
            print("Response: ", response.json())
            print("Status Code: ", response.status_code)

    # Client Credentials
    def client_credentials(self):
        url = "https://wwwcie.ups.com/security/v1/oauth/token"

        # Super simple payload
        payload = {
            "grant_type": "client_credentials"
        }

        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
            "x-merchant-id": self.client_secret
        }

        response = requests.post(url, data=payload, headers=headers, auth=(self.client_id, self.client_secret))

        print(response.json().get('access_token'))
        self.access_t = response.json().get('access_token')

    # Address Validation
    # For request option set to 1 for Validation, to for Classification, and 3 for both.
    # For rr_indicator the default is False for just local validation, True will add more params to the equation.
    # For num_candidates select the number of results you will allow.
    def address_validation(self, request_option='1', version='v1', rr_indicator='False', num_candidates=1):
        url = "https://wwwcie.ups.com/api/addressvalidation/" + version + "/" + request_option

        query = {
            "regionalrequestindicator": rr_indicator,
            "maximumcandidatelistsize": num_candidates
        }

        # This is a testing payload. For actual results use Production methods.
        payload = {
            "XAVRequest": {
                "AddressKeyFormat": {
                    "ConsigneeName": "RITZ CAMERA CENTERS-1749",
                    "BuildingName": "Innoplex",
                    "AddressLine": [
                        "26601 ALISO CREEK ROAD",
                        "STE D",
                        "ALISO VIEJO TOWN CENTER"
                    ],
                    "Region": "ROSWELL,GA,30076-1521",
                    "PoliticalDivision2": "ALISO VIEJO",
                    "PoliticalDivision1": "CA",
                    "PostcodePrimaryLow": "92656",
                    "PostcodeExtendedLow": "1521",
                    "Urbanization": "porto arundal",
                    "CountryCode": "US"
                }
            }
        }

        headers = {
            "Content-Type": "application/json",
            "Authorization": "Bearer" + self.access_t
        }

        response = requests.post(url, json=payload, headers=headers, params=query)

        data = response.json()
        print(data)

    # Dangerous Goods
    # Chemical Reference Data. Determines what UPS allows.
    def chemical_reference(self, version='v1'):
        url = "https://wwwcie.ups.com/api/dangerousgoods/" + version + "/chemicalreferencedata"

        payload = {
            "ChemicalReferenceDataRequest": {
                "IDNumber": "UN1088",
                "ProperShippingName": "Acetal",
                "ShipperNumber": "Your Shipper Number"
            }
        }

        headers = {
            "Content-Type": "application/json",
            "transID": _id_generator(),
            "transactionSrc": self.client_secret,
            "Authorization": f'Bearer {self.access_t}'
        }

        response = requests.post(url, json=payload, headers=headers)

        data = response.json()
        print(data)

    def audit_pre_check(self, version='v1'):
        url = "https://wwwcie.ups.com/api/dangerousgoods/" + version + "/acceptanceauditprecheck"

        # Testing Payload
        payload = {
            "AcceptanceAuditPreCheckRequest": {
                "Request": {
                    "RequestOption": "Request",
                    "TransactionReference": {
                        "CustomerContext": "",
                        "TransactionIdentifier": "TransactionIdentifier"
                    }
                },
                "OriginRecordTransactionTimestamp": "      ",
                "Shipment": {
                    "ShipperNumber": " ",
                    "ShipFromAddress": {
                        "AddressLine": "226 ELMWOOD AVE",
                        "City": "BOGOTA",
                        "StateProvinceCode": "NJ",
                        "PostalCode": "7603",
                        "CountryCode": "US"
                    },
                    "ShipToAddress": {
                        "AddressLinde": "MY STREET 11",
                        "City": "DIEGEM",
                        "StateProvinceCode": "          ",
                        "PostalCode": "1831",
                        "CountryCode": "BE"
                    },
                    "Service": {
                        "Code": "01",
                        "Description": "GROUND "
                    },
                    "RegulationSet": "IATA",
                    "Package": {
                        "PackageIdentifier": "12",
                        "PackageWeight": {
                            "Weight": "12",
                            "UnitOfMeasurement": {
                                "Code": "KGS",
                                "Description": "KILOS"
                            }
                        },
                        "QValue": "0",
                        "OverPackedIndicator": "I",
                        "TransportationMode": "PAX",
                        "EmergencyContact": "SELF",
                        "ChemicalRecord": {
                            "ChemicalRecordIdentifier": "12",
                            "ReportableQuantity": "RQ",
                            "ClassDivisionNumber": "3",
                            "SubRiskClass": "            ",
                            "IDNumber": "UN2621",
                            "PackagingGroupType": "III",
                            "Quantity": "10",
                            "UOM": "KGS",
                            "PackagingInstructionCode": "Y344",
                            "ProperShippingName": "ACETYL METHYL CARBINOL",
                            "TechnicalName": "            ",
                            "AdditionalDescription": "N",
                            "PackagingType": "Fiberboard Box",
                            "HazardLabelRequired": "LABEL IT",
                            "PackagingTypeQuantity": "22",
                            "CommodityRegulatedLevelCode": "LQ",
                            "TransportCategory": "3",
                            "TunnelRestrictionCode": "1"
                        }
                    }
                }
            }
        }

        headers = {
            "Content-Type": "application/json",
            "transId": _id_generator(),
            "transactionSrc": self.client_secret,
            "Authorization": f'Bearer {self.access_t}'
        }

        response = requests.post(url, json=payload, headers=headers)

        data = response.json()
        print(data)

    # Freight Pickup
    # Used to manage TForce Freight
    def freight_pickup(self, version='v1'):
        url = "https://wwwcie.ups.com/api/freight/" + version + "/pickups"

        # Testing Payload
        payload = {
            "FreightPickupRequest": {
                "Request": {
                    "TransactionReference": {
                        "CustomerContext": ""
                    }
                },
                "DestinationPostalCode": "20019",
                "DestinationCountryCode": "US",
                "Requester": {
                    "ThirdPartyIndicator": "true",
                    "AttentionName": "Pickup Testing",
                    "EMailAddress": "test@ups.com",
                    "Name": "Pickup Testing",
                    "Phone": {
                        "Number": "12345667890",
                        "Extension": "122"
                    }
                },
                "ShipFrom": {
                    "AttentionName": "Pickup testing",
                    "Name": "Pickup Testin",
                    "Address": {
                        "AddressLine": [
                            "123 main st ",
                            "address 2",
                            "address 3"
                        ],
                        "City": "Roswell",
                        "StateProvinceCode": "GA",
                        "PostalCode": "30076",
                        "CountryCode": "US"
                    },
                    "Phone": {
                        "Number": "1290987654",
                        "Extension": "123"
                    },
                    "EMailAddress": "test@ups.com"
                },
                "PickupDate": "20190228",
                "EarliestTimeReady": "0800",
                "LatestTimeReady": "1600",
                "ShipmentDetail": {
                    "PackagingType": {
                        "Code": "CAN",
                        "Description": "can"
                    },
                    "NumberOfPieces": "20",
                    "DescriptionOfCommodity": "twenty",
                    "Weight": {
                        "UnitOfMeasurement": {
                            "Code": "LBS",
                            "Description": "pounds"
                        },
                        "Value": "102"
                    }
                },
                "PickupInstructions": "Pickup Instructions ",
                "AdditionalComments": "Additonal Instructions",
                "HandlingInstructions": "Handling Instructions",
                "SpecialInstructions": "Special Instructions ",
                "DeliveryInstructions": "Delivery Instructions"
            }
        }

        headers = {
            "Content-Type": "application/json",
            "transId": _id_generator(),
            "transactionSrc": self.client_secret,
            "Authorization": f'Bearer {self.access_t}'
        }

        response = requests.post(url, json=payload, headers=headers)

        data = response.json()
        print(data)

    # Freight Pickup Cancel
    def freight_pickup_cancel(self, pickup_num, version='v1'):
        url = "https://wwwcie.ups.com/api/freight/" + version + "/pickups"

        # Header, Pickup Request Confiirmation not provided.
        headers = {
            "transId": _id_generator(),
            "transactionSrc": _id_generator(),
            "PickupRequestConfirmationNumber": pickup_num,
            "Authorization": f'Bearer {self.access_t}'
        }

        response = requests.delete(url, headers=headers)

        data = response.json()
        print(data)


# Function to return an address in a way the UPS API can use.
def format_address(consignee_name, building_name, address_line, region, city, state, zip_code, zip_code_ext,
                   urbanization, country_code):
    payload = {
        "XAVRequest": {
            "AddressKeyFormat": {
                "ConsigneeName": consignee_name,
                "BuildingName": building_name,
                "AddressLine": [address_line],
                "Region": region,
                "PoliticalDivision2": city,
                "PoliticalDivision1": state,
                "PostcodePrimaryLow": zip_code,
                "PostcodeExtendedLow": zip_code_ext,
                "Urbanization": urbanization,
                "CountryCode": country_code
            }
        }
    }
    return payload
